;;;; Created on 2008-04-15 16:09:46

(in-package :clone-ml)



(defun convert-one-model (model kb)
  (let ((case-prefix (format nil "~A~A" (model-name model) (model-version model))))
    (let ((case-id (format nil "case @ ~A" case-prefix)) 
          (context-id (format nil "context @ ~A" case-prefix))
          (conclusion-id (format nil "conclusion @ ~A" case-prefix))
          (protocol-id (format nil "protocol @ ~A" case-prefix))
          (process-id (format nil "process @ ~A" case-prefix))
          (item-id (format nil "item @ ~A" case-prefix))
          (issue-id (format nil "issue @ ~A" case-prefix))
          (proposal-id (format nil "proposal @ ~A" case-prefix)))
      (cl-kb:mk-cls case-id :kb kb :supercls '|onenegotiation|::|one_case|)
      (let ((con (cl-kb:mk-cls context-id :kb kb :supercls '|onenegotiation|::|one_context|)))
        (dolist (attr (neginfo-attributes (model-neginfo model)))
          (add-attribute model kb attr con)))
      (cl-kb:mk-cls conclusion-id :kb kb :supercls '|onenegotiation|::|one_conclusion|)
      (let ((pro (cl-kb:mk-cls protocol-id :kb kb :supercls '|onenegotiation|::|one_protocol| )))
        (dolist (attr (protoinfo-attributes (model-protoinfo model)))
          (add-attribute model kb attr pro)))
      (cl-kb:mk-cls process-id :kb kb :supercls '|onenegotiation|::|one_process|)
      (let ((pro (cl-kb:mk-cls item-id :kb kb :supercls '|onenegotiation|::|one_item|)))
        (dolist (attr (item-attributes (infomodel-item (model-infomodel model))))
          (add-attribute model kb attr pro)))
      (cl-kb:mk-cls proposal-id :kb kb :supercls '|onenegotiation|::|one_proposal|)
      (cl-kb:mk-cls issue-id :kb kb :supercls '|onenegotiation|::|one_issue|)
      (dolist (is (item-issues (infomodel-item (model-infomodel model))))
        (add-issue model kb is issue-id proposal-id)))))


(defun add-issue (model kb is issue-id proposal-id)
  (let ((issuename (format nil "~A @ ~A~A " (issue-name is) (model-name model) (model-version model) )))
    (let ((issue (cl-kb:mk-cls issuename :kb kb :supercls (cl-kb:get-cls issue-id :kb kb))))
      (dolist (attr (issue-attributes is))
        (add-attribute model kb attr issue))
      (let ((slotname (format nil "has ~A " issuename )))
        (let ((sl (cl-kb:mk-slot slotname :kb kb)))
          (cl-kb:cls-add-direct-template-slot (cl-kb:get-slot proposal-id :kb kb) sl )
          (setf (cl-kb:slot-maximum-cardinality sl) 1)
          (setf (cl-kb:slot-allowed-clses sl) (list issue)))))))

(defun add-attribute (model kb attr item)
  (let ((attrname (format nil "~A @ ~A~A " (attribute-name attr) (model-name model) (model-version model) )))
    (let ((at (cl-kb:mk-slot attrname :kb kb)))
      (cl-kb:cls-add-direct-template-slot item at)
      (setf (cl-kb:slot-maximum-cardinality at) 1)
      (let ((typ (attribute-onetype attr)))
        (if (not (onetype-globalp typ))
            (let ((typename (onetype-name typ))
                  (kind (onetype-kind typ)))
              (cond
               ((eq kind 'enum)
                (let ((v
                       (mapcan #'(lambda (x) (list x)) (onetype-vals typ))))
                  (setf (cl-kb:slot-allowed-values at) v)))
               ((string= typename "negmod:OneDate")
                (setf (cl-kb:slot-allowed-clses at) '(|dataset|::|date|)))
               (t
                (format t "Not implemented, yet. \"~A\" ~A~%" typename typ))))
            (let ((typename (onetype-name typ))
                  (kind (onetype-kind typ)))
              (cond 
               ((string= typename "negmod:OneString")
                (setf (cl-kb:frame-own-slot-value at '|protege|::|:SLOT-VALUE-TYPE|) "String"))
               ((string= typename "negmod:OneInteger")
                (setf (cl-kb:frame-own-slot-value at '|protege|::|:SLOT-VALUE-TYPE|) "Integer"))
               ((string= typename "negmod:OneBoolean")
                (setf (cl-kb:frame-own-slot-value at '|protege|::|:SLOT-VALUE-TYPE|) "Boolean"))
               ((string= typename "negmod:OneDate")
                (setf (cl-kb:frame-own-slot-values at '|protege|::|:SLOT-VALUE-TYPE|) (list "Instance" '|dataset|::|date|)))
               ((string= typename "negmod:OneImage")
                (setf (cl-kb:frame-own-slot-values at '|protege|::|:SLOT-VALUE-TYPE|) (list "Instance" '|onenegotiation|::|one_image|)))
               ((string= typename "negmod:OneBinaryDocument")
                (setf (cl-kb:frame-own-slot-values at '|protege|::|:SLOT-VALUE-TYPE|) (list "Instance" '|onenegotiation|::|one_binary_document|)))
               ((string= typename "negmod:OneCurrency")
                (setf (cl-kb:frame-own-slot-value at '|protege|::|:SLOT-VALUE-TYPE|) "String"))
               ((string= typename "negmod:OneAmount")
                (setf (cl-kb:frame-own-slot-value at '|protege|::|:SLOT-VALUE-TYPE|) "Integer"))
               ((eq kind 'enum)
                (let ((v
                       (mapcan #'(lambda (x) (list x)) (onetype-vals typ))))
                  (setf (cl-kb:slot-allowed-values at) v)))
               (t
                (format t "Not implemented, yet. \"~A\" ~A~%" typename typ))
               ))))
      )))


